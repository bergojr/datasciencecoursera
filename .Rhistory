for (i in 1:nc){
means[i] <- mean(x[,i])
}
means
}
columnmean(dados)
columnmean <- function(x, removeNA = TRUE){
nc <- ncol(x)
means <- numeric (nc)
for (i in 1:nc){
means[i] <- mean(x[,i], na.rm = removeNA)
}
means
}
columnmean(dados)
install.packages("swirl")
packageVersion("swirl")
library(swirl)
clear
ls()
rm(list=ls())
library(swirl)
install_from_swirl("R Programming")
swirl()
5 + 7
x <- 5 + 7
x
y <- x - 3
y
z <- c(1.1, 9 , 3.14)
?c
z
c(z, 555, z)
z*2+100
my_sqrt <- sqrt(z-1)
my_sqrt
my_div <- z/my_sqrt
my_div
c(1, 2, 3, 4) + c(0, 10)
c(1, 2, 3, 4) + c(0, 10, 100)
z*2+1000
my_div
bye()
library(datasets)
data(iris)
tapply(iris$Sepal.Length, iris$Species, mean)
apply(iris, 1 mean)
apply(iris, 1, mean)
apply(iris[,1:4], 1, mean)
rowMeans(iris[,1:4])
apply(iris, 2, mean)
colMeans(iris)
apply(iris[,1:4], 2, mean)
makeVector <- function(x = numeric()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setmean <- function(mean) m <<- mean
getmean <- function() m
list(set = set, get = get,
setmean = setmean,
getmean = getmean)
}
makeVector(teste)
teste$set
teste <- makeVector()
teste
teste$set(3)
teste$get()
teste$set(rnorm(400))
teste$get()
teste$setmean()
teste$setmean(mediateste)
teste$getmean()
teste$setmean()
teste$setmean(m)
teste$setmean(teste)
teste$getmean()
cachemean
cachemean.R
makeVector <- function(x = numeric()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setmean <- function(mean) m <<- mean
getmean <- function() m
list(set = set, get = get,
setmean = setmean,
getmean = getmean)
}
#
#
cachemean <- function(x, ...) {
m <- x$getmean()
if(!is.null(m)) {
message("getting cached data")
return(m)
}
data <- x$get()
m <- mean(data, ...)
x$setmean(m)
m
}
teste <- makeVector(c(2,5,7,8,9,56,89,23,88,44))
teste
teste$setmean()
cachemean(teste)
cachemean(teste)
teste$get()
teste$getmean()
teste$getmean()
makeMatrix <- function(x = numeric()) {
inv <- NULL
set <- function(y) {
x <<- y
inv <<- NULL
}
get <- function() x
setsolve <- function(solve) inv <<- solve
getsolve <- function() inve
list(set = set, get = get,
setinv = setinv,
getinv = getinve)
}
#
#
cachesolve <- function(x, ...) {
inv <- x$getsolve()
if(!is.null(inv)) {
message("getting cached data")
return(inv)
}
data <- x$get()
inv <- solve(data, ...)
x$setsolve(inv)
m
}
matrix_a <- c(rnom(9))
matrix_a <- c(rnorm(9))
matrix_a
dim(matrix_a) < (3,3)
dim(matrix_a) <- (3,3)
dim(matrix_a) <- c(3,3)
matrix_a
matrix_b<-makeMatrix(matrix_a)
makeMatrix <- function(x = numeric()) {
inv <- NULL
set <- function(y) {
x <<- y
inv <<- NULL
}
get <- function() x
setinv <- function(solve) inv <<- solve
getinv <- function() inv
list(set = set, get = get,
setinv = setinv,
getinv = getinve)
}
#
#
cachesolve <- function(x, ...) {
inv <- x$getinv()
if(!is.null(inv)) {
message("getting cached data")
return(inv)
}
data <- x$get()
inv <- solve(data, ...)
x$setinv(inv)
m
}
matrix_b<-makeMatrix(matrix_a)
makeMatrix <- function(x = numeric()) {
inv <- NULL
set <- function(y) {
x <<- y
inv <<- NULL
}
get <- function() x
setinv <- function(solve) inv <<- solve
getinv <- function() inv
list(set = set, get = get,
setinv = setinv,
getinv = getinv)
}
#
#
cachesolve <- function(x, ...) {
inv <- x$getinv()
if(!is.null(inv)) {
message("getting cached data")
return(inv)
}
data <- x$get()
inv <- solve(data, ...)
x$setinv(inv)
m
}
makeMatrix <- function(x = numeric()) {
inv <- NULL
set <- function(y) {
x <<- y
inv <<- NULL
}
get <- function() x
setinv <- function(solve) inv <<- solve
getinv <- function() inv
list(set = set, get = get,
setinv = setinv,
getinv = getinv)
}
#
#
cachesolve <- function(x, ...) {
inv <- x$getinv()
if(!is.null(inv)) {
message("getting cached data")
return(inv)
}
data <- x$get()
inv <- solve(data, ...)
x$setinv(inv)
m
}
matrix_b<-makeMatrix(matrix_a)
mabrix_b
cachesolve(matrix_b)
makeMatrix <- function(x = numeric()) {
inv <- NULL
set <- function(y) {
x <<- y
inv <<- NULL
}
get <- function() x
setinv <- function(solve) inv <<- solve
getinv <- function() inv
list(set = set, get = get,
setinv = setinv,
getinv = getinv)
}
#
#
cachesolve <- function(x, ...) {
inv <- x$getinv()
if(!is.null(inv)) {
message("getting cached data")
return(inv)
}
data <- x$get()
inv <- solve(data, ...)
x$setinv(inv)
inv
}
matrix_b<-makeMatrix(matrix_a)
cachesolve(matrix_b)
cachesolve(matrix_b)
## Put comments here that give an overall description of what your
## functions do
## Write a short comment describing this function
makeCacheMatrix <- function(x = matrix()) {
inv <- NULL
set <- function(y) {
x <<- y
inv <<- NULL
}
get <- function() x
setinv <- function(solve) inv <<- solve
getinv <- function() inv
list(set = set, get = get,
setinv = setinv,
getinv = getinv)
}
## Write a short comment describing this function
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
inv <- x$getinv()
if(!is.null(inv)) {
message("getting cached data")
return(inv)
}
data <- x$get()
inv <- solve(data, ...)
x$setinv(inv)
inv
}
matriz_b <- makeCacheMatrix(matrix_a)
cachesolve(matrix_b)
matrix_a <- c(rnorm(9))
dim(matrix_a) <- c(3,3)
## Put comments here that give an overall description of what your
## functions do
## Write a short comment describing this function
makeCacheMatrix <- function(x = matrix()) {
inv <- NULL
set <- function(y) {
x <<- y
inv <<- NULL
}
get <- function() x
setinv <- function(solve) inv <<- solve
getinv <- function() inv
list(set = set, get = get,
setinv = setinv,
getinv = getinv)
}
## Write a short comment describing this function
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
inv <- x$getinv()
if(!is.null(inv)) {
message("getting cached data")
return(inv)
}
data <- x$get()
inv <- solve(data, ...)
x$setinv(inv)
inv
}
makeCacheMatrix(matrix_a)
matriz_b <- makeCacheMatrix(matrix_a)
cacheSolve(matriz_b)
library(xlsx)
library(xlsx)
library(xlsx)
library(xlsx)
install.packages("rJava")
library(rJava)
Sys.setenv(JAVA_HOME='C:/Program Files (x86)/Java/jre1.8.0_221')
library(rJava)
Sys.setenv(JAVA_HOME='C:/Program Files (x86)/Java/jre1.8.0_221')
library(xlsx)
Sys.setenv(JAVA_HOME="")
library(xlsx)
library(xlsx)
indColunas <- 7:15
indLinhas <- 18:23
dat <- read.xlsx("gov_NGAP3.xlsx", sheetIndex = 1 , colIndex = indColunas, rowIndex = indLinhas, header = TRUE)
sum(dat$Zip*dat$Ext,na.rm=T)
fileURLxlsx <- "http://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FDATA.gov_NGAP.xlsx"
download.file(fileURLxlsx, destfile = "./gov_NGAP3.xlsx", method = "curl")
downloadedData <- date()
indColunas <- 7:15
indLinhas <- 18:23
dat <- read.xlsx("gov_NGAP3.xlsx", sheetIndex = 1 , colIndex = indColunas, rowIndex = indLinhas, header = TRUE)
sum(dat$Zip*dat$Ext,na.rm=T)
library(rJava)
uscDb <- dbConnect(MySQL(),user="genome",host="genome-mysql.cse.ucsc.edu")
install.packages("RMySQL")
install.packages("RMySQL")
install.packages("RMySQL")
setwd("C:/Coursera/datasciencecoursera")
library(httr)
oauth_endpoints("github")
myapp <- oauth_app("github",
key = "ebcd7a3457a498537300",
secret = "cd5bd1380e91fda569b9c23cd48cec5946623363"
)
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
req <- with_config(gtoken, GET("https://api.github.com/rate_limit"))
stop_for_status(req)
content(req)
myapp <- oauth_app("github",
key = "ebcd7a3457a498537300",
secret = "cd5bd1380e91fda569b9c23cd48cec5946623363"
)
gtoken <- config(token = github_token)
req <- GET("https://api.github.com/rate_limit", gtoken)
stop_for_status(req)
oauth_endpoints("github")
myapp <- oauth_app("github",
key = "ebcd7a3457a498537300",
secret = "cd5bd1380e91fda569b9c23cd48cec5946623363"
)
# 3. Get OAuth credentials
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
install.package("RCurl")
install.package("httpuv")
library(httr)
oauth_endpoints("github")
myapp <- oauth_app("github",
key = "ebcd7a3457a498537300",
secret = "cd5bd1380e91fda569b9c23cd48cec5946623363"
)
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
install.package("RCurl")
install.packages("RCurl")
librat
library(RCurl)
install.package("httpuv")
install.packages("httpuv")
library(httpuv)
# 3. Get OAuth credentials
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
gtoken <- config(token = github_token)
req <- GET("https://api.github.com/users/jtleek/repos", gtoken)
stop_for_status(req)
content(req)
req
gtoken
github_token
req <- GET("https://api.github.com/users/jtleek/repos", gtoken)
stop_for_status(req)
content(req)
gtoken <- config(token = github_token)
req <- GET("https://api.github.com/users/jtleek/datasharing", gtoken)
stop_for_status(req)
content(req)
gtoken <- config(token = github_token)
req <- GET("https://api.github.com/users/jtleek/repos/datasharing", gtoken)
stop_for_status(req)
content(req)
req <- GET("https://api.github.com/users/jtleek/repos", gtoken)
req
texto <- content(req)
texto
gtoken <- config(token = github_token)
req <- GET("https://api.github.com/users/jtleek/datasharing", gtoken)
stop_for_status(req)
content(req)
gtoken <- config(token = github_token)
req <- GET("https://api.github.com/users/jtleek/repos", gtoken)
stop_for_status(req)
content(req)
pumsdata <- read.table("pums.csv", ",", header = TRUE)
class(pumsdata)
fileURL <- "https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Fss06pid.csv"
download.file(fileURL, destfile = "./curso3_semana2_quiz1.csv")
dateDownloaded <- date()
print(dateDownloaded)
quizdata <- read.table("curso3_semana2_quiz1.csv", ",", header = TRUE)
head(quizdata)
library(RMySQL)
acs <- read.table("curso3_semana2_quiz1.csv", ",", header = TRUE)
sqldf("select * from acs")
install.packages("sqldf")
install.packages("sqldf")
library(sqldf)
install.packages("RSQlite")
install.packages("RSQLite")
library(sqldf)
unique(acs$AGEP)
sqldf("select distinct AGEP from acs")
sqldf("select distinct AGEP from acs")
install.packages("sqldf")
install.packages("sqldf")
acs <- read.table("curso3_semana2_quiz1.csv", ",", header = TRUE)
unique(acs$AGEP)
sqldf("select distinct AGEP from acs")
library(sqldf)
sqldf("select distinct AGEP from acs")
a <- unique(acs$AGEP)
a <- unique(acs$AGEP)
b <- sqldf("select distinct AGEP from acs")
c <- sqldf("select unique * from acs")
d <- sqldf("select AGEP where unique from acs")
e <- sqldf("select distinct pwgtp1 from acs")
a
a-b
a-c
c
x <- sqldf("select unique * from acs")
d
d <- sqldf("select AGEP where unique from acs")
e
fileURLxml <- "http://biostat.jhsph.edu/~jleek/contact.html"
doc <- xmlTreeParse(fileURLxml, useInternal = TRUE)
install.packages("XML")
library(XML)
doc <- xmlTreeParse(fileURLxml, useInternal = TRUE)
fileURLxml <- "http://biostat.jhsph.edu/~jleek/contact.html"
doc <- xmlTreeParse(fileURLxml, useInternal = TRUE)
fileURL <- "http://biostat.jhsph.edu/~jleek/contact.html"
con = url(fileURL)
htmlcode <- readLines(con)
close(con)
htmlcode
htmlcode[10]
nchar(htmlcode[10])
nchar(htmlcode[20])
nchar(htmlcode[30])
nchar(htmlcode[100])
fileURLfor <- "https://d396qusza40orc.cloudfront.net/getdata%2Fwksst8110.for"
con2 = url(fileURL)
con2
fileURLxls <- "https://d396qusza40orc.cloudfront.net/getdata%2Fwksst8110.for"
download.file(fileURLxlsx, destfile = "./nino.xlsx", method = "curl")
downloadedData <- date()
fileURLxls <- "http://d396qusza40orc.cloudfront.net/getdata%2Fwksst8110.for"
download.file(fileURLxlsx, destfile = "./nino.xlsx", method = "curl")
nino <- read.table("nino", ",", header = TRUE)
head(nino)
nino <- read.table("nino.csv", ",", header = TRUE)
head(nino)
nino[2]
nino[2,1]
ls
dat <- read.xlsx("nino_xls.xlsx", sheetIndex = 1 , header = TRUE)
install.packages("XLS")
install.packages("xlsx")
library(xlsx)
install.packages("rJava")
library(rJava)
library(rJava)
library(xlsx)
install.packages("rJava")
library(rJava)
