best("AL", "heart attack")
dados.estado.selecionado
dados.estado.selecionado[order(Hospital)]
dados.estado.selecionado
attach(dados.estado.selecionado)
dados.estado.selecionado[order(Hospital)]
names(dados.estado.selecionado)
dados.estado.selecionado[order("Hospital")]
dados.estado.selecionado[order("Hospital"),"heart attack"]
teste <- dados.estado.selecionado[order("Hospital"),"heart attack"]
teste
teste <- dados.estado.selecionado[order("Hospital"),"heart attack"]
teste <- dados.estado.selecionado[order("Hospital"),"heart failure"]
teste
attach(mtcars)
newdata <- mtcars[order(mpg, -cyl),]
newdata
teste[[[]]] <- dados.estado.selecionado[order("Hospital"),"heart attack"]
dados.estado.selecionado <- dados.estado.selecionado[order("Hospital"),"heart attack"]
dados.estado.selecionado
?order
best <- function(state, outcome){
## Read outcome data
# dados disponibilizados um nível acima para facilitar exercício
## Check that state and outcome are valid
estado.selecionado <- dados$State == state
dados.estado.selecionado <- dados[estado.selecionado,]
if (!any(estado.selecionado)){
print("Estado selecionado não existe na base de dados!!!")
break
}
problema.selecionado <- valid.outcome == outcome
if(!any(problema.selecionado)){
print("Problema selecionado não é válido!!!")
break
}
dados.estado.selecionado <- dados.estado.selecionado[order("Hospital"), outcome]
#hospital.ordenado <- dados.estado.selecionado[order(dados.estado.selecionado$Hospital, dados.estado.selecionado[outcome])]
#hospital.ordenado
##problema.selecionado.estado <- dados.estado.selecionado[outcome]
##problema.selecionado.estado
## Return hospital name in that state with lowest 30-day death
## rate
#hospital.problema <- c(dados.estado.selecionado$Hospital , problema.selecionado.estado)
#hospital.problema
}
best("TX","heart attack")
dados.estado.selecionado
best <- function(state, outcome){
## Read outcome data
# dados disponibilizados um nível acima para facilitar exercício
## Check that state and outcome are valid
estado.selecionado <- dados$State == state
dados.estado.selecionado <- dados[estado.selecionado,]
if (!any(estado.selecionado)){
print("Estado selecionado não existe na base de dados!!!")
break
}
problema.selecionado <- valid.outcome == outcome
if(!any(problema.selecionado)){
print("Problema selecionado não é válido!!!")
break
}
dados.estado.selecionado <- dados.estado.selecionado[order("Hospital"), outcome]
dados.estado.selecionado
#hospital.ordenado <- dados.estado.selecionado[order(dados.estado.selecionado$Hospital, dados.estado.selecionado[outcome])]
#hospital.ordenado
##problema.selecionado.estado <- dados.estado.selecionado[outcome]
##problema.selecionado.estado
## Return hospital name in that state with lowest 30-day death
## rate
#hospital.problema <- c(dados.estado.selecionado$Hospital , problema.selecionado.estado)
#hospital.problema
}
best("TX","heart attack")
best <- function(state, outcome){
## Read outcome data
# dados disponibilizados um nível acima para facilitar exercício
## Check that state and outcome are valid
estado.selecionado <- dados$State == state
dados.estado.selecionado <- dados[estado.selecionado,]
if (!any(estado.selecionado)){
print("Estado selecionado não existe na base de dados!!!")
break
}
problema.selecionado <- valid.outcome == outcome
if(!any(problema.selecionado)){
print("Problema selecionado não é válido!!!")
break
}
dados.estado.selecionado <- dados.estado.selecionado[order(outcome,"Hospital")]
dados.estado.selecionado
#hospital.ordenado <- dados.estado.selecionado[order(dados.estado.selecionado$Hospital, dados.estado.selecionado[outcome])]
#hospital.ordenado
##problema.selecionado.estado <- dados.estado.selecionado[outcome]
##problema.selecionado.estado
## Return hospital name in that state with lowest 30-day death
## rate
#hospital.problema <- c(dados.estado.selecionado$Hospital , problema.selecionado.estado)
#hospital.problema
}
best("TX","heart attack")
teste <- best("TX","heart attack")
size(teste)
dim(teste)
best <- function(state, outcome){
## Read outcome data
# dados disponibilizados um nível acima para facilitar exercício
## Check that state and outcome are valid
estado.selecionado <- dados$State == state
dados.estado.selecionado <- dados[estado.selecionado,]
if (!any(estado.selecionado)){
print("Estado selecionado não existe na base de dados!!!")
break
}
problema.selecionado <- valid.outcome == outcome
if(!any(problema.selecionado)){
print("Problema selecionado não é válido!!!")
break
}
dados.estado.selecionado <- dados.estado.selecionado[order(outcome,"Hospital"),]
dados.estado.selecionado
#hospital.ordenado <- dados.estado.selecionado[order(dados.estado.selecionado$Hospital, dados.estado.selecionado[outcome])]
#hospital.ordenado
##problema.selecionado.estado <- dados.estado.selecionado[outcome]
##problema.selecionado.estado
## Return hospital name in that state with lowest 30-day death
## rate
#hospital.problema <- c(dados.estado.selecionado$Hospital , problema.selecionado.estado)
#hospital.problema
}
teste <- best("TX","heart attack")
teste
best <- function(state, outcome){
## Read outcome data
# dados disponibilizados um nível acima para facilitar exercício
## Check that state and outcome are valid
estado.selecionado <- dados$State == state
dados.estado.selecionado <- dados[estado.selecionado,]
if (!any(estado.selecionado)){
print("Estado selecionado não existe na base de dados!!!")
break
}
problema.selecionado <- valid.outcome == outcome
if(!any(problema.selecionado)){
print("Problema selecionado não é válido!!!")
break
}
dados.estado.selecionado <- dados.estado.selecionado[order(-outcome,"Hospital"),]
dados.estado.selecionado
#hospital.ordenado <- dados.estado.selecionado[order(dados.estado.selecionado$Hospital, dados.estado.selecionado[outcome])]
#hospital.ordenado
##problema.selecionado.estado <- dados.estado.selecionado[outcome]
##problema.selecionado.estado
## Return hospital name in that state with lowest 30-day death
## rate
#hospital.problema <- c(dados.estado.selecionado$Hospital , problema.selecionado.estado)
#hospital.problema
}
teste <- best("TX","heart attack")
dados.estado.selecionado <- dados.estado.selecionado[order(outcome,"Hospital"),]
best <- function(state, outcome){
## Read outcome data
# dados disponibilizados um nível acima para facilitar exercício
## Check that state and outcome are valid
estado.selecionado <- dados$State == state
dados.estado.selecionado <- dados[estado.selecionado,]
if (!any(estado.selecionado)){
print("Estado selecionado não existe na base de dados!!!")
break
}
problema.selecionado <- valid.outcome == outcome
if(!any(problema.selecionado)){
print("Problema selecionado não é válido!!!")
break
}
dados.estado.selecionado <- dados.estado.selecionado[order(outcome,"Hospital"),]
dados.estado.selecionado
#hospital.ordenado <- dados.estado.selecionado[order(dados.estado.selecionado$Hospital, dados.estado.selecionado[outcome])]
#hospital.ordenado
##problema.selecionado.estado <- dados.estado.selecionado[outcome]
##problema.selecionado.estado
## Return hospital name in that state with lowest 30-day death
## rate
#hospital.problema <- c(dados.estado.selecionado$Hospital , problema.selecionado.estado)
#hospital.problema
}
teste <- best("TX","heart attack")
teste
dados.estado.selecionado
dados <- outcomes[, c(2,6,7,11,17,23)]
dados[,c(4,5,6)] <-lapply(dados[,c(4,5,6)], as.numeric)
valid.outcome <- c("heart attack", "heart failure", "pneumonia")
names(dados) <- c("Hospital","City","State", valid.outcome)
#dados.selecionados <- dados[dados$State = state]
best <- function(state, outcome){
## Read outcome data
# dados disponibilizados um nível acima para facilitar exercício
## Check that state and outcome are valid
estado.selecionado <- dados$State == state
dados.estado.selecionado <- dados[estado.selecionado,]
if (!any(estado.selecionado)){
print("Estado selecionado não existe na base de dados!!!")
break
}
problema.selecionado <- valid.outcome == outcome
if(!any(problema.selecionado)){
print("Problema selecionado não é válido!!!")
break
}
dados.estado.selecionado <- dados.estado.selecionado[order(outcome,"Hospital"),]
dados.estado.selecionado
#hospital.ordenado <- dados.estado.selecionado[order(dados.estado.selecionado$Hospital, dados.estado.selecionado[outcome])]
#hospital.ordenado
##problema.selecionado.estado <- dados.estado.selecionado[outcome]
##problema.selecionado.estado
## Return hospital name in that state with lowest 30-day death
## rate
#hospital.problema <- c(dados.estado.selecionado$Hospital , problema.selecionado.estado)
#hospital.problema
}
best("TX","heart attack")
outcomes <- read.csv("outcome-of-care-measures.csv", colClasses = "character")
#grep("Heart.Failure", nome.colunas) # função que retorna um vetor contendo as posições
# onde a substring foi encontrada
dados <- outcomes[, c(2,6,7,11,17,23)]
dados[,c(4,5,6)] <-lapply(dados[,c(4,5,6)], as.numeric)
valid.outcome <- c("heart attack", "heart failure", "pneumonia")
names(dados) <- c("Hospital","City","State", valid.outcome)
#dados.selecionados <- dados[dados$State = state]
best <- function(state, outcome){
## Read outcome data
# dados disponibilizados um nível acima para facilitar exercício
## Check that state and outcome are valid
estado.selecionado <- dados$State == state
dados.estado.selecionado <- dados[estado.selecionado,]
if (!any(estado.selecionado)){
print("Estado selecionado não existe na base de dados!!!")
break
}
problema.selecionado <- valid.outcome == outcome
if(!any(problema.selecionado)){
print("Problema selecionado não é válido!!!")
break
}
dados.estado.selecionado <- dados.estado.selecionado[order(outcome,"Hospital"),]
dados.estado.selecionado
#hospital.ordenado <- dados.estado.selecionado[order(dados.estado.selecionado$Hospital, dados.estado.selecionado[outcome])]
#hospital.ordenado
##problema.selecionado.estado <- dados.estado.selecionado[outcome]
##problema.selecionado.estado
## Return hospital name in that state with lowest 30-day death
## rate
#hospital.problema <- c(dados.estado.selecionado$Hospital , problema.selecionado.estado)
#hospital.problema
}
best("TX","heart attack")
best <- function(state, outcome){
## Read outcome data
# dados disponibilizados um nível acima para facilitar exercício
## Check that state and outcome are valid
estado.selecionado <- dados$State == state
dados.estado.selecionado <- dados[estado.selecionado,]
if (!any(estado.selecionado)){
print("Estado selecionado não existe na base de dados!!!")
break
}
problema.selecionado <- valid.outcome == outcome
if(!any(problema.selecionado)){
print("Problema selecionado não é válido!!!")
break
}
dados.estado.selecionado2 <- dados.estado.selecionado[order(outcome),]
dados.estado.selecionado2
#hospital.ordenado <- dados.estado.selecionado[order(dados.estado.selecionado$Hospital, dados.estado.selecionado[outcome])]
#hospital.ordenado
##problema.selecionado.estado <- dados.estado.selecionado[outcome]
##problema.selecionado.estado
## Return hospital name in that state with lowest 30-day death
## rate
#hospital.problema <- c(dados.estado.selecionado$Hospital , problema.selecionado.estado)
#hospital.problema
}
teste <- best("TX","heart attack")
teste
best <- function(state, outcome){
## Read outcome data
# dados disponibilizados um nível acima para facilitar exercício
## Check that state and outcome are valid
estado.selecionado <- dados$State == state
dados.estado.selecionado <- dados[estado.selecionado,]
if (!any(estado.selecionado)){
print("Estado selecionado não existe na base de dados!!!")
break
}
problema.selecionado <- valid.outcome == outcome
if(!any(problema.selecionado)){
print("Problema selecionado não é válido!!!")
break
}
dados.estado.selecionado2 <- dados.estado.selecionado[order(outcome),]
dados.estado.selecionado
#hospital.ordenado <- dados.estado.selecionado[order(dados.estado.selecionado$Hospital, dados.estado.selecionado[outcome])]
#hospital.ordenado
##problema.selecionado.estado <- dados.estado.selecionado[outcome]
##problema.selecionado.estado
## Return hospital name in that state with lowest 30-day death
## rate
#hospital.problema <- c(dados.estado.selecionado$Hospital , problema.selecionado.estado)
#hospital.problema
}
teste <- best("TX","heart attack")
teste
teste[order(Hospital)]
teste[order("Hospital")]
attach(teste)
teste[order(-Hospital)]
attach(mtcars)
class(mtcars)
class(teste)
newdata <- mtcars[order(mpg, -cyl),]
newdata
newdata2 <- teste[order(mpg, -cyl),]
newdata2
newdata2 <- teste[order(Hospital, -cyl),]
newdata2 <- teste[order(Hospital, -cyl),]
newdata2 <- teste[order(Hospital, -`heart attack`),]
newdata2
newdata23 <- teste[order(Hospital, -`heart attack`),]
newdata3 <- teste[order( -`heart attack`, -Hospital),]
newdata3 <- teste[order( -`heart attack`, Hospital(desc)),]
newdata3 <- teste[order( -Hospital),]
newdata3 <- teste[order( -`heart attack`),]
newdata3
newdata3 <- teste[order( `heart attack`),]
newdata3
best <- function(state, outcome){
## Read outcome data
# dados disponibilizados um nível acima para facilitar exercício
## Check that state and outcome are valid
estado.selecionado <- dados$State == state
dados.estado.selecionado <- dados[estado.selecionado,]
if (!any(estado.selecionado)){
print("Estado selecionado não existe na base de dados!!!")
break
}
problema.selecionado <- valid.outcome == outcome
if(!any(problema.selecionado)){
print("Problema selecionado não é válido!!!")
break
}
dados.estado.selecionado2 <- dados.estado.selecionado[order(outcome),]
dados.estado.selecionado2
#hospital.ordenado <- dados.estado.selecionado[order(dados.estado.selecionado$Hospital, dados.estado.selecionado[outcome])]
#hospital.ordenado
##problema.selecionado.estado <- dados.estado.selecionado[outcome]
##problema.selecionado.estado
## Return hospital name in that state with lowest 30-day death
## rate
#hospital.problema <- c(dados.estado.selecionado$Hospital , problema.selecionado.estado)
#hospital.problema
}
teste6 <- best("TX", "heart attack")
teste6
dados <- outcomes[, c(2,6,7,11,17,23)]
dados[,c(4,5,6)] <-lapply(dados[,c(4,5,6)], as.numeric)
valid.outcome <- c("heartattack", "heartfailure", "pneumonia")
names(dados) <- c("Hospital","City","State", valid.outcome)
#dados.selecionados <- dados[dados$State = state]
best <- function(state, outcome){
## Read outcome data
# dados disponibilizados um nível acima para facilitar exercício
## Check that state and outcome are valid
estado.selecionado <- dados$State == state
dados.estado.selecionado <- dados[estado.selecionado,]
if (!any(estado.selecionado)){
print("Estado selecionado não existe na base de dados!!!")
break
}
problema.selecionado <- valid.outcome == outcome
if(!any(problema.selecionado)){
print("Problema selecionado não é válido!!!")
break
}
dados.estado.selecionado2 <- dados.estado.selecionado[order(outcome),]
dados.estado.selecionado2
#hospital.ordenado <- dados.estado.selecionado[order(dados.estado.selecionado$Hospital, dados.estado.selecionado[outcome])]
#hospital.ordenado
##problema.selecionado.estado <- dados.estado.selecionado[outcome]
##problema.selecionado.estado
## Return hospital name in that state with lowest 30-day death
## rate
#hospital.problema <- c(dados.estado.selecionado$Hospital , problema.selecionado.estado)
#hospital.problema
}
teste6 <- best("TX", "heartattack")
teste6
dados.estado.selecionado[order(outcome),]
# Este projeto é requisito para finalizar a semana 4 do segundo Curso de Data Science
# R Programming
outcomes <- read.csv("outcome-of-care-measures.csv", colClasses = "character")
#grep("Heart.Failure", nome.colunas) # função que retorna um vetor contendo as posições
# onde a substring foi encontrada
dados <- outcomes[, c(2,6,7,11,17,23)]
dados[,c(4,5,6)] <-lapply(dados[,c(4,5,6)], as.numeric)
valid.outcome <- c("heartattack", "heartfailure", "pneumonia")
names(dados) <- c("Hospital","City","State", valid.outcome)
#dados.selecionados <- dados[dados$State = state]
best <- function(state, outcome){
## Read outcome data
# dados disponibilizados um nível acima para facilitar exercício
## Check that state and outcome are valid
estado.selecionado <- dados$State == state
dados.estado.selecionado <- dados[estado.selecionado,]
if (!any(estado.selecionado)){
print("Estado selecionado não existe na base de dados!!!")
break
}
problema.selecionado <- valid.outcome == outcome
if(!any(problema.selecionado)){
print("Problema selecionado não é válido!!!")
break
}
dados.estado.selecionado2 <- dados.estado.selecionado[order(outcome),]
dados.estado.selecionado2
#hospital.ordenado <- dados.estado.selecionado[order(dados.estado.selecionado$Hospital, dados.estado.selecionado[outcome])]
#hospital.ordenado
##problema.selecionado.estado <- dados.estado.selecionado[outcome]
##problema.selecionado.estado
## Return hospital name in that state with lowest 30-day death
## rate
#hospital.problema <- c(dados.estado.selecionado$Hospital , problema.selecionado.estado)
#hospital.problema
}
teste6 <- best("TX", "heartattack")
teste6
dados.estado.selecionado
outcomes <- read.csv("outcome-of-care-measures.csv", colClasses = "character")
#grep("Heart.Failure", nome.colunas) # função que retorna um vetor contendo as posições
# onde a substring foi encontrada
dados <- outcomes[, c(2,6,7,11,17,23)]
dados[,c(4,5,6)] <-lapply(dados[,c(4,5,6)], as.numeric)
valid.outcome <- c("heartattack", "heartfailure", "pneumonia")
names(dados) <- c("Hospital","City","State", valid.outcome)
#dados.selecionados <- dados[dados$State = state]
best <- function(state, outcome){
## Read outcome data
# dados disponibilizados um nível acima para facilitar exercício
## Check that state and outcome are valid
estado.selecionado <- dados$State == state
dados.estado.selecionado <- dados[estado.selecionado,]
if (!any(estado.selecionado)){
print("Estado selecionado não existe na base de dados!!!")
break
}
problema.selecionado <- valid.outcome == outcome
if(!any(problema.selecionado)){
print("Problema selecionado não é válido!!!")
break
}
dados.estado.selecionado2 <- dados.estado.selecionado[-order(outcome),]
dados.estado.selecionado2
#hospital.ordenado <- dados.estado.selecionado[order(dados.estado.selecionado$Hospital, dados.estado.selecionado[outcome])]
#hospital.ordenado
##problema.selecionado.estado <- dados.estado.selecionado[outcome]
##problema.selecionado.estado
## Return hospital name in that state with lowest 30-day death
## rate
#hospital.problema <- c(dados.estado.selecionado$Hospital , problema.selecionado.estado)
#hospital.problema
}
teste6 <- best("TX", "heartattack")
teste6
# Este projeto é requisito para finalizar a semana 4 do segundo Curso de Data Science
# R Programming
outcomes <- read.csv("outcome-of-care-measures.csv", colClasses = "character")
#grep("Heart.Failure", nome.colunas) # função que retorna um vetor contendo as posições
# onde a substring foi encontrada
dados <- outcomes[, c(2,6,7,11,17,23)]
dados[,c(4,5,6)] <-lapply(dados[,c(4,5,6)], as.numeric)
valid.outcome <- c("heartattack", "heartfailure", "pneumonia")
names(dados) <- c("Hospital","City","State", valid.outcome)
#dados.selecionados <- dados[dados$State = state]
best <- function(state, outcome){
## Read outcome data
# dados disponibilizados um nível acima para facilitar exercício
## Check that state and outcome are valid
estado.selecionado <- dados$State == state
dados.estado.selecionado <- dados[estado.selecionado,]
print(dados.estado.selecionado)
if (!any(estado.selecionado)){
print("Estado selecionado não existe na base de dados!!!")
break
}
problema.selecionado <- valid.outcome == outcome
if(!any(problema.selecionado)){
print("Problema selecionado não é válido!!!")
break
}
dados.estado.selecionado2 <- dados.estado.selecionado[order(outcome),]
print(dados.estado.selecionado2)
dados.estado.selecionado2
#hospital.ordenado <- dados.estado.selecionado[order(dados.estado.selecionado$Hospital, dados.estado.selecionado[outcome])]
#hospital.ordenado
##problema.selecionado.estado <- dados.estado.selecionado[outcome]
##problema.selecionado.estado
## Return hospital name in that state with lowest 30-day death
## rate
#hospital.problema <- c(dados.estado.selecionado$Hospital , problema.selecionado.estado)
#hospital.problema
}
teste6 <- best("TX", "heartattack")
